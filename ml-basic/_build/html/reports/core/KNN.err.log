Traceback (most recent call last):
  File "E:\Tools\Python\3_12_6\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "E:\Tools\Python\3_12_6\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Tools\Python\3_12_6\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Tools\Python\3_12_6\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "E:\Tools\Python\3_12_6\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "E:\Tools\Python\3_12_6\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "E:\Tools\Python\3_12_6\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score

# 增加数据量
X = np.array([[1, 2], [2, 3], [3, 2], [6, 6], [7, 7], [8, 6], [1, 1], [2, 1], [3, 3], [6, 7], [7, 8], [8, 7], [2, 2], [3, 3], [4, 4], [5, 5], [9, 9], [8, 8]])
y = np.array([0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1])

# 将数据分为训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

# 创建一个管道，包含标准化和KNN分类器
pipeline = Pipeline([
    ('scaler', StandardScaler()), 
    ('knn', KNeighborsClassifier())
])

# 设置要搜索的K值范围，考虑到数据量和交叉验证的折数
parameters = {'knn__n_neighbors': range(1, len(X_train) // 3)}

# 使用网格搜索，通过交叉验证找到最佳的K值，设置较小的cv值
grid_search = GridSearchCV(pipeline, parameters, cv=3)

# 训练模型
grid_search.fit(X_train, y_train)

# 在测试集上进行预测
y_pred = grid_search.predict(X_test)

# 计算并打印准确率
accuracy = accuracy_score(y_test, y_pred)
print(f"Model accuracy: {accuracy:.2f}")

# 显示最佳K值
print(f"Best number of neighbors: {grid_search.best_params_['knn__n_neighbors']}")

# 使用模型进行新数据点的预测
new_data = np.array([[2, 2]])
new_data_scaled = grid_search.best_estimator_.named_steps['scaler'].transform(new_data)  # 使用相同的缩放
prediction = grid_search.best_estimator_.named_steps['knn'].predict(new_data_scaled)
print(f"The predicted class for new data point {new_data[0]} is {prediction[0]}")
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[1], line 2[0m
[0;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[1;32m----> 2[0m [38;5;28;01mfrom[39;00m [38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mmodel_selection[39;00m [38;5;28;01mimport[39;00m train_test_split, GridSearchCV
[0;32m      3[0m [38;5;28;01mfrom[39;00m [38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mneighbors[39;00m [38;5;28;01mimport[39;00m KNeighborsClassifier
[0;32m      4[0m [38;5;28;01mfrom[39;00m [38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpreprocessing[39;00m [38;5;28;01mimport[39;00m StandardScaler

[1;31mModuleNotFoundError[0m: No module named 'sklearn'

